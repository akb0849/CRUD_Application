"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = __importDefault(require("chai"));
var chai_as_promised_1 = __importDefault(require("chai-as-promised"));
var simple_mock_1 = require("simple-mock");
var graphql_1 = require("graphql");
var iterall_1 = require("iterall");
var subscription_1 = require("graphql/subscription");
var index_1 = require("../index");
var graphql_subscriptions_1 = require("graphql-subscriptions");
chai_1.default.use(chai_as_promised_1.default);
var expect = chai_1.default.expect;
var FIRST_EVENT = process.env.GCP_PUBSUB_INTEGRATION_TEST_TOPIC;
function buildSchema(iterator) {
    return new graphql_1.GraphQLSchema({
        query: new graphql_1.GraphQLObjectType({
            name: 'Query',
            fields: {
                testString: {
                    type: graphql_1.GraphQLString,
                    resolve: function (_, args) {
                        return 'works';
                    }
                }
            }
        }),
        subscription: new graphql_1.GraphQLObjectType({
            name: 'Subscription',
            fields: {
                testSubscription: {
                    type: graphql_1.GraphQLString,
                    subscribe: graphql_subscriptions_1.withFilter(function () { return iterator; }, function () { return true; }),
                    resolve: function (root) {
                        return 'FIRST_EVENT';
                    }
                }
            }
        })
    });
}
describe('PubSubAsyncIterator', function () {
    var _this = this;
    var query = graphql_1.parse("\n    subscription S1 {\n      testSubscription\n    }\n  ");
    var pubsub = new index_1.GooglePubSub();
    var origIterator = pubsub.asyncIterator(FIRST_EVENT);
    var returnSpy = simple_mock_1.mock(origIterator, 'return');
    var schema = buildSchema(origIterator);
    var results = subscription_1.subscribe(schema, query);
    it('should allow subscriptions', function () {
        return results
            .then(function (ai) { return __awaiter(_this, void 0, void 0, function () {
            var r;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect(iterall_1.isAsyncIterable(ai)).to.be.true;
                        r = ai.next();
                        return [4, pubsub.publish(FIRST_EVENT, {})];
                    case 1:
                        _a.sent();
                        return [2, r];
                }
            });
        }); })
            .then(function (res) {
            expect(res.value.data.testSubscription).to.equal('FIRST_EVENT');
        });
    }).timeout(6000);
    it('should clear event handlers', function () {
        return results
            .then(function (ai) {
            expect(iterall_1.isAsyncIterable(ai)).to.be.true;
            pubsub.publish(FIRST_EVENT, {});
            return ai.return();
        })
            .then(function (res) {
            expect(returnSpy.callCount).to.be.gte(1);
        });
    });
});
//# sourceMappingURL=integration-tests.js.map